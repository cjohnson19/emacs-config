#+TITLE:        Doom Emacs Configuration
#+SUBTITLE:     Spending way too much time on settings
#+AUTHOR:       Chase Johnson
#+EMAIL:        joh13266@umn.edu
#+DATE:         {{{modification-time(%Y-%m-%d %H:%M, t)}}}; {{{timezone}}}
#+macro:        timezone (eval (substring (shell-command-to-string "date +%Z") 0 -1))
#+startup:      overview
#+property:     header-args:emacs-lisp :tangle yes :cache yes :results silent :comments link
#+property:     header-args :tangle no :results silent

#+begin_quote
When you write a program, think of it primarily as a work of literature. You're
trying to write something that human beings are going to read. Don't think of it
primarily as something a computer is going to follow. The more effective you are
at making your program readable, the more effective it's going to be: You'll
understand it today, you'll understand it next week, and your successors who are
going to maintain and modify it will understand it. --- Donald Knuth
#+end_quote

* Intro
Creating a fully customized Emacs experience is almost mandatory. So, this is my
crack at both creating a custom configuration and remaining aware of what I've
done later on.
* Basic Configurations
Make this file run better with lexical binding
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Personal Information
This gets inserted automatically when using things like ~org-mode~, ~GPG~, ~email~,
and more.
#+begin_src emacs-lisp
(setq user-full-name "Chase Johnson"
      user-mail-address "joh13266@umn.edu")
#+end_src
** Better Defaults
*** Simple Settings
Improving some... /interesting/... default variable choices.
#+begin_src emacs-lisp
(setq-default
 delete-by-moving-to-trash t ; Deleted files go to the trash
 x-stretch-cursor t)         ; Cursor stretches to fill glyph

(setq evil-want-fine-undo t  ; Better undo
      auto-save-default t)   ; Don't lose my work
#+end_src

Adding hooks to automatically wrap the text when it reaches sufficient length
when it's in a text based buffer.
#+begin_src emacs-lisp
(add-hook! 'text-mode-hook 'auto-fill-mode)
(add-hook! 'markdown-mode-hook 'auto-fill-mode)
#+end_src

Add a newline to the end of files so git doesn't yell at me.
#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src
*** Auto-customizations
When changes are made via a customization interface, they are added to ~init.el~.
That muddies up a pretty sensitive file, so add changes to a separate file and
load those in instead.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src
*** Key bindings
Swap the keybindings for ~Org Capture~ and ~Pop up scratch buffer~
#+begin_src emacs-lisp
(map! :leader
      :desc "Org Capture"           "x" #'org-capture
      :desc "Pop up scratch buffer" "X" #'doom/open-scratch-buffer
      :desc "Org Agenda"            "a" #'org-agenda)
#+end_src
** Doom Configuration
*** Visuals
**** Font
I really like ~Jetbrains Mono~ for its clarity, but when we have some mixed pitch
requirements then we'll use default Helvetica with the same font size.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Jetbrains Mono" :size 15)
      doom-big-font (font-spec :family "Jetbrains Mono" :size 24)
      doom-unicode-font (font-spec :family "Jetbrains Mono" :size 15))
#+end_src
**** Theme
~doom-one~ is really nice, but the ~doom-dracula~ theme has a lot better contrast
between different elements and it is also much more consistent with the rest of
my setup.
#+begin_src emacs-lisp
(setq doom-theme 'doom-dracula)
#+end_src
Sometimes the theme will overwrite previous font italic preferences - let's
prevent that.
#+begin_src emacs-lisp
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+end_src
I like to see the word count more often. In addition, the logo for the major
mode is nice to have at times. This also allows ~mu4e~ to display the number of
unread emails I have currently in the modeline.
#+begin_src emacs-lisp
(after! doom-modeline
  (setq doom-modeline-enable-word-count t
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-continuous-word-count-modes '(org-mode markdown-mode)
        doom-modeline-mu4e t))
#+end_src
**** Splash Image
I set up a little lambda svg to serve as the splash screen.
#+begin_src emacs-lisp
(setq fancy-splash-image (expand-file-name "misc/nebula-transparent.png" doom-private-dir))
#+end_src
**** Editor Changes
I don't know how people get by with absolute line numbers.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
* Package Loading
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el" :comments no
:END:
This file shouldn't be byte compiled.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;;; -*- no-byte-compile: t; -*-
#+end_src
** Loading Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle "packages.el"
:END:
This is where we install packages, by declaring them with ~package!~ macro, then
running ~doom sync~. Afterwards, =M-x doom/reload= updates them.
*** Org Mode
**** Org Plot
Emacs has integration with ~GNUPlot~, let's use that to plot some tables to create
nice graphics. This is a modified version that adds in ~radar~ charts.
#+begin_src emacs-lisp
(package! org-plot :recipe (:local-repo "lisp/org-plot" :build (:not compile)))
#+end_src
**** Org SML
#+begin_src emacs-lisp
(package! ob-sml :recipe (:local-repo "lisp/ob-sml" :build (:not compile)))
#+end_src
**** Org Bullets
This gives some better heading bullets when in Emacs.
#+begin_src emacs-lisp
(package! org-bullets)
#+end_src
**** Graphviz dot
Creating a ~dot~ src block can create diagrams of data.
#+begin_src emacs-lisp
(package! graphviz-dot-mode)
#+end_src
**** Org Super Agenda
This gives some additional Org-mode features.
#+begin_src emacs-lisp
(package! org-super-agenda :pin "614371890c2b74e46b9652b2399c3aebb384d351")
#+end_src
**** Org Declarative Org Capture Templates
Gives declarative syntax for Org Capture templates
#+begin_src emacs-lisp
(package! doct :pin "dabb30ebea866ef225b81561c8265d740b1e81c3")
#+end_src
**** Visuals
***** Pretty Table
Replaces the default org-mode tables with box-drawing characters
#+begin_src emacs-lisp
(package! org-pretty-table-mode :recipe (:host github :repo "Fuco1/org-pretty-table") :pin "474ad84a8fe5377d67ab7e491e8e68dac6e37a11")
#+end_src
**** Org Alert
This will notify me when there is an approaching deadline or scheduled event.
#+begin_src emacs-lisp
(package! org-alert :pin "f87bff4acbd839acb4d2245b56b2c3d21f950911")
#+end_src
**** Fancy Priorities
This allows priorities to have a special icon
#+begin_src emacs-lisp
(package! org-fancy-priorities :pin "819bb993b71e7253cefef7047306ab4e0f9d0a86")
#+end_src
*** Fun
#+begin_src emacs-lisp
(package! xkcd :pin "66e928706fd660cfdab204c98a347b49c4267bdf")
#+end_src
*** Mail
This package allows ~mu4e~ to alert me and display the unread email count on the modeline.
#+begin_src emacs-lisp
(package! mu4e-alert)
#+end_src
*** GraphQL
#+begin_src emacs-lisp
(package! graphql-mode)
#+end_src
*** Adelfa
Adding in support for [[http://sparrow.cs.umn.edu/adelfa/index.html][Adelfa]].
#+begin_src emacs-lisp
(package! adelfa-mode :recipe (:local-repo "lisp/adelfa-mode" :build (:not compile)))
#+end_src
* Package Configuration
** Company
Let's always get some completions suggested to us.
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 1))
  (setq company-show-numbers t)
#+end_src
And let's keep a longer memory of what I've typed.
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src

*** Plain Text
~ispell~ should work in plain text modes.
#+begin_src emacs-lisp
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src
** Ispell
*** Downloading dictionary
I got a dictionary from [[http://app.aspell.net/create][SCOWL Custom List/Dictionary]] with the following options
| Size       | Spelling(s) | Diacritic Handling | Special Lists  | Format |
|------------+-------------+--------------------+----------------+--------|
| 70 (large) | American    | Keep               | Hacker & Roman | Aspell |
**** Installing Dictionary
#+begin_src shell :tangle no
cd /tmp
curl -o "aspell6-en-custom.tar.bz2" "http://app.aspell.net/create?max_size=70&spelling=US&max_variant=0&diacritic=keep&special=hacker&special=roman-numerals&encoding=utf-8&format=inline&download=aspell"
tar -xjf "aspell6-en-custom.tar.bz2"

cd aspell6-en-custom
./configure && make && sudo make install
#+end_src
*** Configuration
#+begin_src emacs-lisp
(setq ispell-local-dictionary (expand-file-name  ".ispell_personal" doom-private-dir))
(setq ispell-dictionary "en-custom")
#+end_src
** Tramp
Use a better TRAMP mode form when I'm remotely editing things.
#+begin_src emacs-lisp
(setq tramp-default-method "ssh")
#+end_src
** Which-key
I want suggestions faster
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
#+end_src
** xkcd
Set up better commands
#+begin_src emacs-lisp
(use-package! xkcd
  :commands (xkcd-get-json
             xkcd-download xkcd-get)
  :config
  (after! evil-snipe
    (add-to-list 'evil-snipe-disabled-modes 'xkcd-mode)))
#+end_src
** Mail
Set up ~mu4e-alert~ to use ~terminal-notifier~ and send changes to the modeline.
#+begin_src emacs-lisp
(mu4e-alert-set-default-style 'notifier)
(add-hook! 'after-init-hook #'mu4e-alert-enable-notifications)
(add-hook! 'after-init-hook #'mu4e-alert-enable-mode-line-display)
(setq mu4e-alert-email-notification-types '(count))
#+end_src
** Org Alert
#+begin_src emacs-lisp
(use-package! org-alert
  :config
  (setq alert-default-style 'notifier)
  (setq org-alert-interval 180)
  (org-alert-enable))
#+end_src
* Applications
** Mail
Tell emacs that I will be using [[https://www.emacswiki.org/emacs/mu4e][mu4e]].
#+begin_src emacs-lisp
(setq mail-user-agent 'mu4e-user-agent)
#+end_src
*** Receiving
Set up the mail directory and refresh the email's state every 10 minutes.
#+begin_src emacs-lisp
(setq +mu4e-mu4e-mail-path "~/.mail/"
      mu4e-update-interval (* 5 60)
      mu4e-get-mail-command "mbsync -a"
      mu4e-change-filenames-when-moving t
      mu4e-index-cleanup t
      mu4e-headers-include-related nil)
#+end_src

Set up default email account folder locations and a temporary signature. Very
likely, I will not be sending any emails from Emacs, but the integrations with
org mode and email seem long term beneficial.
#+BEGIN_SRC emacs-lisp
;; Each path is relative to `+mu4e-mu4e-mail-path', which is ~/.mail by default
(set-email-account! "uni"
  '((mu4e-sent-folder       . "/sent")
    (mu4e-drafts-folder     . "/drafts")
    (mu4e-trash-folder      . "/trash")
    ; (mu4e-refile-folder     . "/[Gmail]/All Mail")
    (smtpmail-smtp-user     . "joh13266@umn.edu")
    (user-mail-address      . "joh13266@umn.edu")    ;; only needed for mu < 1.4
    ;(mu4e-compose-signature . "---\nChase Johnson"))
    )
  t)
#+END_SRC

And run mu4e in the background
#+begin_src emacs-lisp
(mu4e t)
#+end_src
*** Sending
I use [[https://marlam.de/msmtp/msmtp.html#Configuration-files][msmtp]] to send my emails through ~SMTP~.

#+begin_src emacs-lisp
(after! mu4e
  (setq sendmail-program "/usr/local/bin/msmtp"
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))
#+end_src
**** Org Msg
Allows me to write an email in org mode and then it will be converted to html
when sent.
#+begin_src emacs-lisp
(require 'org-msg)
(setq +org-msg-accent-color "#1a5fb4"
      org-msg-greeting-fmt "\nHi %s,\n\n"
      org-msg-default-alternatives '(text)
      org-msg-signature "\n\n#+begin_signature\n-Chase\n#+end_signature")
(map! :map org-msg-edit-mode-map
      :after org-msg
      :n "G" #'org-msg-goto-body)
#+end_src
** Daemon
Let's spin up a server so that other programs can interact with emacs.
#+begin_src emacs-lisp
; (server-start)
#+end_src
** Emacs Anywhere
Be smart about the mode that Emacs anywhere uses.
#+begin_src emacs-lisp
(defun markdown-window-p (window-title)
  "Judges from WINDOW-TITLE whether the current window likes markdown"
  (if (string-match-p (rx (or "Stack Exchange" "Stack Overflow"
                              "Pull Request" "Issue" "Discord"))
                      window-title) t nil))
#+end_src

When the window opens, we will use a specific location.
#+begin_src emacs-lisp
(defvar emacs-anywhere--active-markdown nil
  "Whether the buffer started off as markdown.
Affects behaviour of `emacs-anywhere--finalise-content'")

(defun emacs-anywhere--finalise-content (&optional _frame)
  (when emacs-anywhere--active-markdown
    (fundamental-mode)
    (goto-char (point-min))
    (insert "#+property: header-args :exports both\n#+options: toc:nil\n")
    (rename-buffer "*EA Pre Export*")
    (org-export-to-buffer 'gfm ea--buffer-name)
    (kill-buffer "*EA Pre Export*"))
  (gui-select-text (buffer-string)))

(define-minor-mode emacs-anywhere-mode
  "To tweak the current buffer for some emacs-anywhere considerations"
  :init-value nil
  :keymap (list
           ;; Finish edit, but be smart in org mode
           (cons (kbd "C-c C-c")
                 (cmd! (if (and (eq major-mode 'org-mode)
                                (org-in-src-block-p))
                           (org-ctrl-c-ctrl-c)
                         (delete-frame))))
           ;; Abort edit. emacs-anywhere saves the current edit for next time.
           (cons (kbd "C-c C-k")
                 (cmd! (setq ea-on nil)
                       (delete-frame))))
   (when emacs-anywhere-mode
    ;; line breaking
    (turn-off-auto-fill)
    (visual-line-mode t)
    ;; DEL/C-SPC to clear (first keystroke only)
    (set-transient-map (let ((keymap (make-sparse-keymap)))
                         (define-key keymap (kbd "DEL")   (cmd! (delete-region (point-min) (point-max))))
                         (define-key keymap (kbd "C-SPC") (cmd! (delete-region (point-min) (point-max))))
                         keymap))
    ;; disable tabs
    (when (bound-and-true-p centaur-tabs-mode)
      (centaur-tabs-local-mode t))))
(defun ea-popup-handler (app-name window-title x y w h)
  (interactive)
  (set-frame-size (selected-frame) 80 12)
  ;; position the frame near the mouse
  (let* ((mousepos (split-string (shell-command-to-string "xdotool getmouselocation 2>/dev/null| sed -E \"s/ screen:0 window:[^ ]*|x:|y://g\"")))
         (mouse-x (- (string-to-number (nth 0 mousepos)) 50))
         (mouse-y (- (string-to-number (nth 1 mousepos)) 25)))
    (set-frame-position (selected-frame) mouse-x mouse-y))

  (set-frame-name (concat "Quick Edit ∷ " ea-app-name " — "
                          (truncate-string-to-width
                           (string-trim
                            (string-trim-right window-title
                                               (format "-[A-Za-z0-9 ]*%s" ea-app-name))
                            "[\s-]+" "[\s-]+")
                           45 nil nil "…")))
  (message "window-title: %s" window-title)

  (when-let ((selection (gui-get-selection 'PRIMARY)))
    (insert selection))

  ;; convert buffer to org mode if markdown
  (when (markdown-window-p window-title)
    (shell-command-on-region (point-min) (point-max)
                             "pandoc -f markdown -t org" nil t)
    (deactivate-mark) (goto-char (point-max)))

  ;; remove any blank newline at end
  (delete-trailing-whitespace)
  (delete-char (- (skip-chars-backward "\n")))

  ;; set major mode
  (org-mode)

  ;; set markdown status
  (setq-local emacs-anywhere--active-markdown (markdown-window-p window-title))

  (advice-add 'ea--delete-frame-handler :before #'emacs-anywhere--finalise-content)

  ;; I'll be honest with myself, I /need/ spellcheck
  (spell-fu-buffer)

  (evil-insert-state) ; start in insert
  (emacs-anywhere-mode 1))

(add-hook 'ea-popup-hook 'ea-popup-handler)
#+end_src
** Presenting
I want to be as clear as possible when I'm sharing my screen. For example,
ligatures are okay when /I'm/ the only one who sees my editor. But when I'm
presenting a screen for something like an office hours, I don't want them to
have to interpret these for their plain text alternatives. So, I'm introducing a
new interactive function: ~toggle-sharing-screen~ that will remove all of these
confusing aspects of my config when seen from other eyes and mapping it to ~SPC
t S~.

#+begin_src emacs-lisp
(defun toggle-sharing-screen ()
    "Turn on my-sharing-screen-setup."
    (interactive)
  (mac-auto-operator-composition-mode 'toggle)
  (prettify-symbols-mode 'toggle))
(map! :leader
      :desc "Toggle sharing screen" "t S" #'toggle-sharing-screen)
#+end_src

* Language Configuration
** General
*** File Templates
I want /a lot/ to be at the top of ~org~ files and I want to do /little/ typing.
#+begin_src emacs-lisp
(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
#+end_src
These are defined as a snippet.
** Org Mode
:PROPERTIES:
:CUSTOM_ID: org
:END:
I'm in love with org mode. The learning curve was steep at first, but the
versatility is so much better. [[https://tecosaur.com/][tecosaur]] outlined why it's so good great here

#+plot: transpose:yes type:radar min:0 max:5 file:"misc/document-format-comparison.png"
| Format   | Control | Initial Effort | Simplicity | Editor Support | Integrations | Versatility |
|----------+---------+----------------+------------+----------------+--------------+-------------|
| Word     |       2 |              4 |          4 |              2 |            3 |           2 |
| LaTeX    |       4 |              1 |          1 |              3 |            2 |           4 |
| Org Mode |       4 |              2 |        3.5 |              1 |            4 |           4 |
| Markdown |       1 |              3 |          3 |              4 |            3 |           1 |

#+attr_html: :class invertible :alt Radar chart comparing document formats
[[file:misc/document-format-comparison.png]]
*** Tweaking Defaults
#+begin_src emacs-lisp
(setq org-directory "~/org/"
      org-use-property-inheritance t
      org-catch-invisible-edits 'smart)
#+end_src

Set the ~:comments~ header-argument to be default
#+begin_src emacs-lisp
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noweb . "no")
        (:hlines . "no")
        (:tangle . "no")
        (:comments . "link")))
#+end_src

Set up the org roam location.
#+begin_src emacs-lisp
(setq org-roam-directory "~/org/roam/")
#+end_src

There is a weird bug with newlines and ~electric-indent~, so we have to disable
that for now.
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook (lambda () (electric-indent-local-mode -1)))
(add-hook! 'org-mode-hook #'evil-normalize-keymaps)
#+end_src

And let's always enable pretty mode.
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook #'+org-pretty-mode)
#+end_src

I set it to where it will automatically add a new line when it gets too long.
#+begin_src emacs-lisp
(add-hook! 'org-mode-hook 'auto-fill-mode)
#+end_src

Let's enable the pretty tables globally
#+begin_src emacs-lisp
;(setq global-org-pretty-table-mode t)
(use-package! org-pretty-table
  :config
  (setq global-org-pretty-table-mode t))
#+end_src

The built in ellipsis isn't the best communicator for more content being under a heading.
#+begin_src emacs-lisp
(setq org-ellipsis " ▼")
#+end_src

Enable ~org-habit~
#+begin_src emacs-lisp
(add-to-list 'org-modules 'org-habit)
(add-to-list 'org-modules 'org-id)
#+end_src
*** Adding new features
**** View exported file
=SPC m v= doesn't have a mapping, so let's open any exports of our file with it.
#+begin_src emacs-lisp
(after! org
  (map! :map org-mode-map
        :localleader
        :desc "View exported file" "v" #'org-view-output-file)

  (defun org-view-output-file (&optional org-file-path)
    "Visit buffer open on the first output file (if any) found, using `org-view-output-file-extensions'"
    (interactive)
    (let* ((org-file-path (or org-file-path (buffer-file-name) ""))
           (dir (file-name-directory org-file-path))
           (basename (file-name-base org-file-path))
           (output-file nil))
      (dolist (ext org-view-output-file-extensions)
        (unless output-file
          (when (file-exists-p
                 (concat dir basename "." ext))
            (setq output-file (concat dir basename "." ext)))))
      (if output-file
          (if (member (file-name-extension output-file) org-view-external-file-extensions)
              (org-open-file output-file)
            (pop-to-buffer (or (find-buffer-visiting output-file)
                               (find-file-noselect output-file))))
        (message "No exported file found")))))

(defvar org-view-output-file-extensions '("pdf" "md" "rst" "txt" "tex" "html")
  "Search for output files with these extensions, in order, viewing the first that matches")
(defvar org-view-external-file-extensions '("html")
  "File formats that should be opened externally.")
#+end_src
**** Org Bullets
#+begin_src emacs-lisp
(after! org
  ;; Getting org mode bullets
  (require 'org-bullets)
  (add-hook! 'org-mode-hook (lambda () (org-bullets-mode 1)))
  ;; When emphasizing a word in org-mode, hide the surrounding characters
  (setq org-hide-emphasis-markers t
        org-export-allow-bind-keywords t))
#+end_src
**** Org Priorities
Set up priorities from ~A~ to ~D~.
#+begin_src emacs-lisp
(use-package! org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '((?A . "⚑")
                                    (?B . "⬆")
                                    (?C . "■" )
                                    (?D . "⬇")
                                    (?E . "☕"))))
#+end_src
**** Ligatures
#+begin_src emacs-lisp
(setq org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E)
;(appendq! +ligatures-extra-symbols
;          `(:checkbox      "☐"
;            :pending       "◼"
;            :checkedbox    "☑"
;            :list_property "∷"
;            :em_dash       "—"
;            :ellipses      "…"
;            :begin_quote   "❮"
;            :end_quote     "❯"
;            :header        "›"))
;(after! org
;  (set-ligatures! 'org-mode
;    :merge t
;    :checkbox      "[ ]"
;    :pending       "[-]"
;    :checkedbox    "[X]"
;    :list_property "::"
;    :em_dash       "---"
;    :ellipsis      "..."
;    :begin_quote   "#+begin_quote"
;    :end_quote     "#+end_quote"
;    :header        "#+header:"))
;(plist-put +ligatures-extra-symbols :name "⁍")
#+end_src

*** Exporting (General)
Nest deeper in the table of contents and headings.
#+begin_src emacs-lisp
(after! org
  (setq org-export-headline-levels 5))
#+end_src
If we want to tag a heading to not be exported, but keep the content.
#+begin_src emacs-lisp
(after! org
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src
*** Exporting to HTML
This is a hugely expensive operation, but looks really good. So we define a new
mode, ~org-fancy-html-export-mode~ that can be disabled for faster exporting.
#+begin_src emacs-lisp
(define-minor-mode org-fancy-html-export-mode
  "Toggle my fabulous org export tweaks. While this mode itself does a little bit,
the vast majority of the change in behaviour comes from switch statements in:
 - `org-html-template-fancier'
 - `org-html--build-meta-info-extended'
 - `org-html-src-block-collapsable'
 - `org-html-block-collapsable'
 - `org-html-table-wrapped'
 - `org-html--format-toc-headline-colapseable'
 - `org-html--toc-text-stripped-leaves'
 - `org-export-html-headline-anchor'"
  :global t
  :init-value t
  (if org-fancy-html-export-mode
      (setq org-html-style-default org-html-style-fancy
            org-html-meta-tags org-html-meta-tags-fancy
            org-html-checkbox-type 'html-span)
    (setq org-html-style-default org-html-style-plain
          org-html-meta-tags org-html-meta-tags-plain
          org-html-checkbox-type 'html)))
#+end_src
**** Extra header content
#+begin_src emacs-lisp
(defadvice! org-html-template-fancier (orig-fn contents info)
  "Return complete document string after HTML conversion.
CONTENTS is the transcoded contents string.  INFO is a plist
holding export options. Adds a few extra things to the body
compared to the default implementation."
  :around #'org-html-template
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn contents info)
    (concat
     (when (and (not (org-html-html5-p info)) (org-html-xhtml-p info))
       (let* ((xml-declaration (plist-get info :html-xml-declaration))
              (decl (or (and (stringp xml-declaration) xml-declaration)
                        (cdr (assoc (plist-get info :html-extension)
                                    xml-declaration))
                        (cdr (assoc "html" xml-declaration))
                        "")))
         (when (not (or (not decl) (string= "" decl)))
           (format "%s\n"
                   (format decl
                           (or (and org-html-coding-system
                                    (fboundp 'coding-system-get)
                                    (coding-system-get org-html-coding-system 'mime-charset))
                               "iso-8859-1"))))))
     (org-html-doctype info)
     "\n"
     (concat "<html"
             (cond ((org-html-xhtml-p info)
                    (format
                     " xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"%s\" xml:lang=\"%s\""
                     (plist-get info :language) (plist-get info :language)))
                   ((org-html-html5-p info)
                    (format " lang=\"%s\"" (plist-get info :language))))
             ">\n")
     "<head>\n"
     (org-html--build-meta-info info)
     (org-html--build-head info)
     (org-html--build-mathjax-config info)
     "</head>\n"
     "<body>\n<input type='checkbox' id='theme-switch'><div id='page'><label id='switch-label' for='theme-switch'></label>"
     (let ((link-up (org-trim (plist-get info :html-link-up)))
           (link-home (org-trim (plist-get info :html-link-home))))
       (unless (and (string= link-up "") (string= link-home ""))
         (format (plist-get info :html-home/up-format)
                 (or link-up link-home)
                 (or link-home link-up))))
     ;; Preamble.
     (org-html--build-pre/postamble 'preamble info)
     ;; Document contents.
     (let ((div (assq 'content (plist-get info :html-divs))))
       (format "<%s id=\"%s\">\n" (nth 1 div) (nth 2 div)))
     ;; Document title.
     (when (plist-get info :with-title)
       (let ((title (and (plist-get info :with-title)
                         (plist-get info :title)))
             (subtitle (plist-get info :subtitle))
             (html5-fancy (org-html--html5-fancy-p info)))
         (when title
           (format
            "<div class='page-header'><div class='page-meta'>%s, %s</div><h1 class=\"title\">%s%s</h1></div>\n"
            (org-export-data (plist-get info :date) info)
            (org-export-data (plist-get info :author) info)
            (org-export-data title info)
            (if subtitle
                (format
                 (if html5-fancy
                     "<p class=\"subtitle\">%s</p>\n"
                   (concat "\n" (org-html-close-tag "br" nil info) "\n"
                           "<span class=\"subtitle\">%s</span>\n"))
                 (org-export-data subtitle info))
              "")))))
     contents
     (format "</%s>\n" (nth 1 (assq 'content (plist-get info :html-divs))))
     ;; Postamble.
     (org-html--build-pre/postamble 'postamble info)
     ;; Possibly use the Klipse library live code blocks.
     (when (plist-get info :html-klipsify-src)
       (concat "<script>" (plist-get info :html-klipse-selection-script)
               "</script><script src=\""
               org-html-klipse-js
               "\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\""
               org-html-klipse-css "\"/>"))
     ;; Closing document.
     "</div>\n</body>\n</html>")))
#+end_src

Let's add a table of contents link to the top of the page
#+begin_src emacs-lisp
(defadvice! org-html-toc-linked (depth info &optional scope)
  "Build a table of contents.

Just like `org-html-toc', except the header is a link to \"#\".

DEPTH is an integer specifying the depth of the table.  INFO is
a plist used as a communication channel.  Optional argument SCOPE
is an element defining the scope of the table.  Return the table
of contents as a string, or nil if it is empty."
  :override #'org-html-toc
  (let ((toc-entries
         (mapcar (lambda (headline)
                   (cons (org-html--format-toc-headline headline info)
                         (org-export-get-relative-level headline info)))
                 (org-export-collect-headlines info depth scope))))
    (when toc-entries
      (let ((toc (concat "<div id=\"text-table-of-contents\">"
                         (org-html--toc-text toc-entries)
                         "</div>\n")))
        (if scope toc
          (let ((outer-tag (if (org-html--html5-fancy-p info)
                               "nav"
                             "div")))
            (concat (format "<%s id=\"table-of-contents\">\n" outer-tag)
                    (let ((top-level (plist-get info :html-toplevel-hlevel)))
                      (format "<h%d><a href=\"#\" style=\"color:inherit; text-decoration: none;\">%s</a></h%d>\n"
                              top-level
                              (org-html--translate "Table of Contents" info)
                              top-level))
                    toc
                    (format "</%s>\n" outer-tag))))))))
#+end_src

Let's add some metadata
#+begin_src emacs-lisp
(defun org-html-meta-tags-fancy (info)
  "Use the INFO plist to construct the meta tags, as described in `org-html-meta-tags'."
  (let ((title (org-html-plain-text
                (org-element-interpret-data (plist-get info :title)) info))
        (author (and (plist-get info :with-author)
                     (let ((auth (plist-get info :author)))
                       ;; Return raw Org syntax.
                       (and auth (org-html-plain-text
                                  (org-element-interpret-data auth) info))))))
    (list
     (when (org-string-nw-p author)
       (list "name" "author" author))
     (when (org-string-nw-p (plist-get info :description))
       (list "name" "description"
             (plist-get info :description)))
     '("name" "generator" "org mode")
     '("name" "theme-color" "#77aa99")
     '("property" "og:type" "article")
     (list "property" "og:title" title)
     (let ((subtitle (org-export-data (plist-get info :subtitle) info)))
       (when (org-string-nw-p subtitle)
         (list "property" "og:description" subtitle)))
     '("property" "og:image" "https://tecosaur.com/resources/org/nib.png")
     '("property" "og:image:type" "image/png")
     '("property" "og:image:width" "200")
     '("property" "og:image:height" "200")
     '("property" "og:image:alt" "Green fountain pen nib")
     (when (org-string-nw-p author)
       (list "property" "og:article:author:first_name" (car (s-split-up-to " " author 2))))
     (when (and (org-string-nw-p author) (s-contains-p " " author))
       (list "property" "og:article:author:last_name" (cadr (s-split-up-to " " author 2))))
     (list "property" "og:article:published_time" (format-time-string "%FT%T%z")))))

(unless (functionp #'org-html-meta-tags-default)
  (defalias 'org-html-meta-tags-default #'ignore))
(setq org-html-meta-tags #'org-html-meta-tags-fancy)
#+end_src
**** Custom CSS/JS
We define some template files that we read into exported files.
#+begin_src emacs-lisp
(after! org
  (setq org-html-style-fancy
        (concat (f-read-text (expand-file-name "misc/org-export-header.html" doom-private-dir))
                "<script>\n"
                (f-read-text (expand-file-name "misc/main.js" doom-private-dir))
                "</script>\n<style>\n"
                (f-read-text (expand-file-name "misc/main.css" doom-private-dir))
                "</style>")
        org-html-style-plain org-html-style-default
        org-html-style-default  org-html-style-fancy
        org-html-htmlize-output-type 'css
        org-html-doctype "html5"
        org-html-html5-fancy t))
#+end_src
**** Collapsible src and example blocks
#+begin_src emacs-lisp
(defadvice! org-html-src-block-collapsable (orig-fn src-block contents info)
  "Wrap the usual <pre> block in a <details>"
  :around #'org-html-src-block
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn src-block contents info)
    (let* ((properties (cadr src-block))
           (lang (mode-name-to-lang-name
                  (plist-get properties :language)))
           (name (plist-get properties :name))
           (ref (org-export-get-reference src-block info)))
      (format
       "<details id='%s' class='code'%s><summary%s>%s</summary>
<div class='gutter'>
<a href='#%s'>#</a>
<button title='Copy to clipboard' onclick='copyPreToClipdord(this)'>⎘</button>\
</div>
%s
</details>"
       ref
       (if (member (org-export-read-attribute :attr_html src-block :collapsed)
                   '("y" "yes" "t" "true"))
           "" " open")
       (if name " class='named'" "")
       (if (not name) (concat "<span class='lang'>" lang "</span>")
         (format "<span class='name'>%s</span><span class='lang'>%s</span>" name lang))
       ref
       (if name
           (replace-regexp-in-string (format "<pre\\( class=\"[^\"]+\"\\)? id=\"%s\">" ref) "<pre\\1>"
                                     (funcall orig-fn src-block contents info))
         (funcall orig-fn src-block contents info))))))

(defun mode-name-to-lang-name (mode)
  (or (cadr (assoc mode
                   '(("asymptote" "Asymptote")
                     ("awk" "Awk")
                     ("C" "C")
                     ("clojure" "Clojure")
                     ("css" "CSS")
                     ("D" "D")
                     ("ditaa" "ditaa")
                     ("dot" "Graphviz")
                     ("calc" "Emacs Calc")
                     ("emacs-lisp" "Emacs Lisp")
                     ("fortran" "Fortran")
                     ("gnuplot" "gnuplot")
                     ("haskell" "Haskell")
                     ("hledger" "hledger")
                     ("java" "Java")
                     ("js" "Javascript")
                     ("latex" "LaTeX")
                     ("ledger" "Ledger")
                     ("lisp" "Lisp")
                     ("lilypond" "Lilypond")
                     ("lua" "Lua")
                     ("matlab" "MATLAB")
                     ("mscgen" "Mscgen")
                     ("ocaml" "Objective Caml")
                     ("octave" "Octave")
                     ("org" "Org mode")
                     ("oz" "OZ")
                     ("plantuml" "Plantuml")
                     ("processing" "Processing.js")
                     ("python" "Python")
                     ("R" "R")
                     ("ruby" "Ruby")
                     ("sass" "Sass")
                     ("scheme" "Scheme")
                     ("screen" "Gnu Screen")
                     ("sed" "Sed")
                     ("sml" "Standard ML")
                     ("sh" "shell")
                     ("sql" "SQL")
                     ("sqlite" "SQLite")
                     ("forth" "Forth")
                     ("io" "IO")
                     ("J" "J")
                     ("makefile" "Makefile")
                     ("maxima" "Maxima")
                     ("perl" "Perl")
                     ("picolisp" "Pico Lisp")
                     ("scala" "Scala")
                     ("shell" "Shell Script")
                     ("ebnf2ps" "ebfn2ps")
                     ("cpp" "C++")
                     ("abc" "ABC")
                     ("coq" "Coq")
                     ("groovy" "Groovy")
                     ("bash" "bash")
                     ("csh" "csh")
                     ("ash" "ash")
                     ("dash" "dash")
                     ("ksh" "ksh")
                     ("mksh" "mksh")
                     ("posh" "posh")
                     ("ada" "Ada")
                     ("asm" "Assembler")
                     ("caml" "Caml")
                     ("delphi" "Delphi")
                     ("html" "HTML")
                     ("idl" "IDL")
                     ("mercury" "Mercury")
                     ("metapost" "MetaPost")
                     ("modula-2" "Modula-2")
                     ("pascal" "Pascal")
                     ("ps" "PostScript")
                     ("prolog" "Prolog")
                     ("simula" "Simula")
                     ("tcl" "tcl")
                     ("tex" "LaTeX")
                     ("plain-tex" "TeX")
                     ("verilog" "Verilog")
                     ("vhdl" "VHDL")
                     ("xml" "XML")
                     ("nxml" "XML")
                     ("conf" "Configuration File"))))
      mode))
#+end_src

#+name: Example, fixed width, and property blocks
#+begin_src emacs-lisp
(after! org
  (defun org-html-block-collapsable (orig-fn block contents info)
    "Wrap the usual block in a <details>"
    (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
        (funcall orig-fn block contents info)
      (let ((ref (org-export-get-reference block info))
            (type (pcase (car block)
                    ('property-drawer "Properties")))
            (collapsed-default (pcase (car block)
                                 ('property-drawer t)
                                 (_ nil)))
            (collapsed-value (org-export-read-attribute :attr_html block :collapsed)))
        (format
         "<details id='%s' class='code'%s>
<summary%s>%s</summary>
<div class='gutter'>\
<a href='#%s'>#</a>
<button title='Copy to clipboard' onclick='copyPreToClipdord(this)'>⎘</button>\
</div>
%s\n
</details>"
         ref
         (if (or (and collapsed-value (member collapsed-value '("y" "yes" "t" "true")))
                 collapsed-default)
             "" " open")
         (if type " class='named'" "")
         (if type (format "<span class='type'>%s</span>" type) "")
         ref
         (funcall orig-fn block contents info)))))

  (advice-add 'org-html-example-block   :around #'org-html-block-collapsable)
  (advice-add 'org-html-fixed-width     :around #'org-html-block-collapsable)
  (advice-add 'org-html-property-drawer :around #'org-html-block-collapsable))
#+end_src
**** Include extra font-locking in htmlize
#+begin_src emacs-lisp
(add-hook! 'htmlize-before-hook #'highlight-numbers--turn-on)
#+end_src
**** Handle table overflow
#+begin_src emacs-lisp
(defadvice! org-html-table-wrapped (orig-fn table contents info)
  "Wrap the usual <table> in a <div>"
  :around #'org-html-table
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn table contents info)
    (let* ((name (plist-get (cadr table) :name))
           (ref (org-export-get-reference table info)))
      (format "<div id='%s' class='table'>
<div class='gutter'><a href='#%s'>#</a></div>
<div class='tabular'>
%s
</div>\
</div>"
              ref ref
              (if name
                  (replace-regexp-in-string (format "<table id=\"%s\"" ref) "<table"
                                            (funcall orig-fn table contents info))
                (funcall orig-fn table contents info))))))
#+end_src
**** TOC as collapsible tree
#+begin_src emacs-lisp
(defadvice! org-html--format-toc-headline-colapseable (orig-fn headline info)
  "Add a label and checkbox to `org-html--format-toc-headline's usual output,
to allow the TOC to be a collapseable tree."
  :around #'org-html--format-toc-headline
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn headline info)
    (let ((id (or (org-element-property :CUSTOM_ID headline)
                  (org-export-get-reference headline info))))
      (format "<input type='checkbox' id='toc--%s'/><label for='toc--%s'>%s</label>"
              id id (funcall orig-fn headline info)))))
#+end_src
Leaves shouldn't have a label on them
#+begin_src emacs-lisp
(defadvice! org-html--toc-text-stripped-leaves (orig-fn toc-entries)
  "Remove label"
  :around #'org-html--toc-text
  (if (or (not org-fancy-html-export-mode) (bound-and-true-p org-msg-export-in-progress))
      (funcall orig-fn toc-entries)
    (replace-regexp-in-string "<input [^>]+><label [^>]+>\\(.+?\\)</label></li>" "\\1</li>"
                              (funcall orig-fn toc-entries))))
#+end_src
**** Make verbatim different to code
#+begin_src emacs-lisp
(setq org-html-text-markup-alist
      '((bold . "<b>%s</b>")
        (code . "<code>%s</code>")
        (italic . "<i>%s</i>")
        (strike-through . "<del>%s</del>")
        (underline . "<span class=\"underline\">%s</span>")
        (verbatim . "<kbd>%s</kbd>")))
#+end_src
**** Change Checkbox
#+begin_src emacs-lisp
(after! org
  (appendq! org-html-checkbox-types
            '((html-span
               ((on . "<span class='checkbox'></span>")
                (off . "<span class='checkbox'></span>")
                (trans . "<span class='checkbox'></span>")))))
  (setq org-html-checkbox-type 'html-span))
#+end_src
**** Header Anchors
#+begin_src emacs-lisp
(after! org
  (defun org-export-html-headline-anchor (text backend info)
    (when (and (org-export-derived-backend-p backend 'html)
               org-fancy-html-export-mode)
      (unless (bound-and-true-p org-msg-export-in-progress)
        (replace-regexp-in-string
         "<h\\([0-9]\\) id=\"\\([a-z0-9-]+\\)\">\\(.*[^ ]\\)<\\/h[0-9]>" ; this is quite restrictive, but due to `org-reference-contraction' I can do this
         "<h\\1 id=\"\\2\">\\3<a aria-hidden=\"true\" href=\"#\\2\">#</a> </h\\1>"
         text))))
  (add-to-list 'org-export-filter-headline-functions
               'org-export-html-headline-anchor))
#+end_src
*** Agenda
**** Basics
Configuring the basics of agenda
#+begin_src emacs-lisp
(setq org-agenda-start-with-log-mode t
      org-log-done 'time
      org-log-into-drawer t
      org-agenda-show-future-repeats nil
      org-habit-show-habits-only-for-today nil)
#+end_src

The current todo keywords aren't the most useful.
#+begin_src emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "|" "DONE(d!)")
    (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE (a)" "|" "COMPLETED(c)" "CANC(k@)")))
#+end_src

Set up tags
#+begin_src emacs-lisp
(setq org-tag-alist
  '((:startgroup)
    ; Mutually exclusive tags
    (:endgroup)
    ("work" . ?w)
    ("uni" . ?u)
    ("personal" . ?p)
    ("lecture" . ?l)
    ("assignment" . ?a)
    ("test" . ?t)
    ("project" . ?P)
    ("read" . ?r)
    ("info" . ?i)
    ("email" . ?e)
    ("note" . ?n)
    ("errand" . ?E)))
#+end_src

Set up refile targets for archiving and similar.
#+begin_src emacs-lisp
(setq org-refile-targets
  '(("archive.org" :maxlevel . 1)
    ("todo.org" :maxlevel . 1)))
(advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

Add keybindings for opening todo items.
#+begin_src emacs-lisp
(map! :leader
      :desc "Open Todo file"
      "- t"
      #'(lambda () (interactive) (find-file "~/org/todo.org"))
      :leader
      :desc "Open Habit file"
      "- h"
      #'(lambda () (interactive) (find-file "~/org/habits.org"))
      :leader
      :desc "Open Class file"
      "- c"
      #'(lambda () (interactive) (find-file "~/org/class.org")))
#+end_src

Add keybinding for opening the calendar.
#+begin_src emacs-lisp
(map! :leader
      :desc "Open Calendar"
      "o c"
      #'(lambda () (interactive) (cfw:open-org-calendar)))
#+end_src

Once we quit the agenda -- say after we have updated a task's status -- we
should save all of the org buffers open so that their modification from the
agenda is persisted.
#+begin_src emacs-lisp
(advice-add 'org-agenda-quit :before 'org-save-all-org-buffers)
#+end_src

By default, habits are not in the time grid. When it comes to habits that I want
to both track and be aware of their occurrence time, such as lectures, they
shouldn't take place at the bottom. To fix this, we change the sorting strategy
that the org-agenda uses.
#+begin_src emacs-lisp
(setq org-agenda-sorting-strategy
      '((agenda time-up priority-down category-keep)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep)))
#+end_src

When a task is archived, it doesn't trigger the same
~org-update-statistics-cookies~ function as we want. So, when we archive a task,
let's run this function to make sure the statistics are up to date.
#+begin_src emacs-lisp
(defun update-all-statistics ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'org-update-statistics-cookies)))
(advice-add 'org-archive-subtree :after 'update-all-statistics)
#+end_src
**** Super Agenda
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :commands (org-super-agenda-mode))
(after! org-agenda
  (org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-seperator nil
      org-habit-show-habits-only-for-today nil
      org-agenda-tags-column 100
      org-agenda-start-with-log-mode t)
(setq org-agenda-custom-commands
      '(("o" "Overview"
          ((agenda "" ((org-agenda-span 'day)
                       (org-super-agenda-groups
                        '((:name "Today"
                           :time-grid t
                           :order 1)))))
           (alltodo "" ((org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:discard (:tag ("Daily" "Routine")))
                           (:name "Next to do"
                            :todo "NEXT"
                            :order 2)
                           (:name "Due Today"
                            :deadline today
                            :order 3)
                           (:name "University"
                            :tag "uni"
                            :time-grid t
                            :order 4)
                           (:name "Work"
                            :tag "work"
                            :time-grid t
                            :order 5)
                           (:name "Personal"
                            :tag "Personal"
                            :order 6)
                           ))))))
        ("d" "Dates & Deadlines"
         ((alltodo "" ((org-agenda-overriding-header "")
                   (org-super-agenda-groups
                    '((:discard (:tag ("lecture" "Daily")))
                      (:name "Projects"
                       :tag "project"
                       :order 1)
                      (:name "Tests"
                       :tag "test"
                       :order 2)
                      (:name "Assignment"
                       :tag "assignment"
                       :order 3)
                      (:discard (:not (:tag ("uni"))))))))))))
#+end_src
**** Capture
Making more visually nice capture templates
#+begin_src emacs-lisp :noweb no-export
(use-package! doct
  :commands (doct))
(after! org-capture
  <<prettify-capture>>
  (setq +org-capture-uni-units (condition-case nil
                                   (split-string (f-read-text "~/org/.uni-units") "\n")
                                 (error nil)))

  (defun +doct-icon-declaration-to-icon (declaration)
    "Convert :icon declaration to icon"
    (let ((name (pop declaration))
          (set  (intern (concat "all-the-icons-" (plist-get declaration :set))))
          (face (intern (concat "all-the-icons-" (plist-get declaration :color))))
          (v-adjust (or (plist-get declaration :v-adjust) 0.01)))
      (apply set `(,name :face ,face :v-adjust ,v-adjust))))

  (defun +doct-iconify-capture-templates (groups)
    "Add declaration's :icon to each template group in GROUPS."
    (let ((templates (doct-flatten-lists-in groups)))
      (setq doct-templates (mapcar (lambda (template)
                                     (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))
                                                 (spec (plist-get (plist-get props :doct) :icon)))
                                       (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)
                                                                      "\t"
                                                                      (nth 1 template))))
                                     template)
                                   templates))))

  (setq doct-after-conversion-functions '(+doct-iconify-capture-templates))

  (defun set-org-capture-templates ()
    (setq org-capture-templates
          (doct `(("Personal todo" :keys "t"
                   :icon ("checklist" :set "octicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %?"
                              "%i %a")
                   )
                  ("Personal note" :keys "n"
                   :icon ("sticky-note-o" :set "faicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* %?"
                              "%i %a")
                   )
                  ("University" :keys "u"
                   :icon ("graduation-cap" :set "faicon" :color "purple")
                   :file +org-capture-todo-file
                   :headline "University"
                   :unit-prompt ,(format "%%^{Unit|%s}" (string-join +org-capture-uni-units "|"))
                   :prepend t
                   :type entry
                   :children (("Test" :keys "t"
                               :icon ("timer" :set "material" :color "red")
                               :template ("* TODO [#C] [%{unit-prompt}] %? :uni:test:"
                                          "SCHEDULED: %^{Test date:}T"
                                          "%i %a"))
                              ("Assignment" :keys "a"
                               :icon ("library_books" :set "material" :color "orange")
                               :template ("* TODO [#B] [%{unit-prompt}] %? :assignment:"
                                          "DEADLINE: %^{Due date:}T"
                                          "%i %a"))
                              ("Lecture" :keys "l"
                               :icon ("keynote" :set "fileicon" :color "orange")
                               :template ("* TODO [#C] [%{unit-prompt}] %? :lecture:"
                                          "%i %a"))
                              ("Miscellaneous task" :keys "u"
                               :icon ("list" :set "faicon" :color "yellow")
                               :template ("* TODO [#D] [%{unit-prompt}] %?"
                                          "%i %a"))))
                  ("Email" :keys "e"
                   :icon ("envelope" :set "faicon" :color "blue")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :immediate-finish t
                   :template ("* TODO %{action} %:fromname :email:"
                              "%{action} %:fromname about %:subject %{extra}"
                              "%i %a")
                   :children (("Follow up" :keys "f"
                               :icon ("paper-plane" :set "faicon" :color "green")
                               :action "[#C] Follow up with"
                               :extra ""
                               )
                               ("Follow up with deadline" :keys "d"
                               :icon ("paper-plane-o" :set "faicon" :color "red")
                               :action "[#C] Follow up with"
                               :extra "\nDEADLINE: %^{Deadline:}t"
                               )
                              ("Read" :keys "r"
                               :icon ("book" :set "faicon" :color "blue")
                               :action "[#D] Read email from"
                               :extra ""
                               )))
                  ("Interesting" :keys "i"
                   :icon ("eye" :set "faicon" :color "lcyan")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Interesting"
                   :type entry
                   :template ("* [ ] %{desc}%? :%{i-type}:"
                              "%i %a")
                   :children (("Webpage" :keys "w"
                               :icon ("globe" :set "faicon" :color "green")
                               :desc "%(org-cliplink-capture) "
                               :i-type "read:web"
                               )
                              ("Article" :keys "a"
                               :icon ("file-text" :set "octicon" :color "yellow")
                               :desc ""
                               :i-type "read:research"
                               )
                              ("Information" :keys "i"
                               :icon ("info-circle" :set "faicon" :color "blue")
                               :desc ""
                               :i-type "read:info"
                               )
                              ("Idea" :keys "I"
                               :icon ("bubble_chart" :set "material" :color "silver")
                               :desc ""
                               :i-type "idea"
                               )))
                  ("Tasks" :keys "k"
                   :icon ("inbox" :set "octicon" :color "yellow")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Tasks"
                   :type entry
                   :template ("* TODO %? %^G%{extra}"
                              "%i %a")
                   :children (("General Task" :keys "k"
                               :icon ("inbox" :set "octicon" :color "yellow")
                               :extra ""
                               )
                              ("Task with deadline" :keys "d"
                               :icon ("timer" :set "material" :color "orange" :v-adjust -0.1)
                               :extra "\nDEADLINE: %^{Deadline:}t"
                               )
                              ("Scheduled Task" :keys "s"
                               :icon ("calendar" :set "octicon" :color "orange")
                               :extra "\nSCHEDULED: %^{Start time:}t"
                               )
                              ))
                  ("Work" :keys "w"
                   :icon ("book" :set "octicon" :color "orange")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Work"
                   :type entry
                   :template ("* TODO %? %{extra}"
                              "%i %a")
                   :children (("General Task" :keys "k"
                               :icon ("inbox" :set "octicon" :color "yellow")
                               :extra ""
                               )
                              ("Work task with deadline" :keys "d"
                               :icon ("timer" :set "material" :color "red"
                               :v-adjust -0.1)
                               :extra "\nDEADLINE: %^{Deadline:}t")
                              ("Scheduled Task" :keys "s"
                               :icon ("calendar" :set "octicon" :color "orange")
                               :extra "\nSCHEDULED: %^{Start time:}t"
                               )
                              ))))))

  (set-org-capture-templates)
  (unless (display-graphic-p)
    (add-hook 'server-after-make-frame-hook
      (defun org-capture-reinitialise-hook ()
        (when (display-graphic-p)
          (set-org-capture-templates)
          (remove-hook 'server-after-make-frame-hook
                       #'org-capture-reinitialise-hook))))))
#+end_src
Setup the capture dialogue.
#+name: prettify-capture
#+begin_src emacs-lisp :tangle no
(defun org-capture-select-template-prettier (&optional keys)
  "Select a capture template, in a prettier way than default
Lisp programs can force the template by setting KEYS to a string."
  (let ((org-capture-templates
         (or (org-contextualize-keys
              (org-capture-upgrade-templates org-capture-templates)
              org-capture-templates-contexts)
             '(("t" "Task" entry (file+headline "" "Tasks")
                "* TODO %?\n  %u\n  %a")))))
    (if keys
        (or (assoc keys org-capture-templates)
            (error "No capture template referred to by \"%s\" keys" keys))
      (org-mks org-capture-templates
               "Select a capture template\n━━━━━━━━━━━━━━━━━━━━━━━━━"
               "Template key: "
               `(("q" ,(concat (all-the-icons-octicon "stop" :face 'all-the-icons-red :v-adjust 0.01) "\tAbort")))))))
(advice-add 'org-capture-select-template :override #'org-capture-select-template-prettier)

(defun org-mks-pretty (table title &optional prompt specials)
  "Select a member of an alist with multiple keys. Prettified.

TABLE is the alist which should contain entries where the car is a string.
There should be two types of entries.

1. prefix descriptions like (\"a\" \"Description\")
   This indicates that `a' is a prefix key for multi-letter selection, and
   that there are entries following with keys like \"ab\", \"ax\"…

2. Select-able members must have more than two elements, with the first
   being the string of keys that lead to selecting it, and the second a
   short description string of the item.

The command will then make a temporary buffer listing all entries
that can be selected with a single key, and all the single key
prefixes.  When you press the key for a single-letter entry, it is selected.
When you press a prefix key, the commands (and maybe further prefixes)
under this key will be shown and offered for selection.

TITLE will be placed over the selection in the temporary buffer,
PROMPT will be used when prompting for a key.  SPECIALS is an
alist with (\"key\" \"description\") entries.  When one of these
is selected, only the bare key is returned."
  (save-window-excursion
    (let ((inhibit-quit t)
          (buffer (org-switch-to-buffer-other-window "*Org Select*"))
          (prompt (or prompt "Select: "))
          case-fold-search
          current)
      (unwind-protect
          (catch 'exit
            (while t
              (setq-local evil-normal-state-cursor (list nil))
              (erase-buffer)
              (insert title "\n\n")
              (let ((des-keys nil)
                    (allowed-keys '("\C-g"))
                    (tab-alternatives '("\s" "\t" "\r"))
                    (cursor-type nil))
                ;; Populate allowed keys and descriptions keys
                ;; available with CURRENT selector.
                (let ((re (format "\\`%s\\(.\\)\\'"
                                  (if current (regexp-quote current) "")))
                      (prefix (if current (concat current " ") "")))
                  (dolist (entry table)
                    (pcase entry
                      ;; Description.
                      (`(,(and key (pred (string-match re))) ,desc)
                       (let ((k (match-string 1 key)))
                         (push k des-keys)
                         ;; Keys ending in tab, space or RET are equivalent.
                         (if (member k tab-alternatives)
                             (push "\t" allowed-keys)
                           (push k allowed-keys))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) (propertize "›" 'face 'font-lock-comment-face) "  " desc "…" "\n")))
                      ;; Usable entry.
                      (`(,(and key (pred (string-match re))) ,desc . ,_)
                       (let ((k (match-string 1 key)))
                         (insert (propertize prefix 'face 'font-lock-comment-face) (propertize k 'face 'bold) "   " desc "\n")
                         (push k allowed-keys)))
                      (_ nil))))
                ;; Insert special entries, if any.
                (when specials
                  (insert "─────────────────────────\n")
                  (pcase-dolist (`(,key ,description) specials)
                    (insert (format "%s   %s\n" (propertize key 'face '(bold all-the-icons-red)) description))
                    (push key allowed-keys)))
                ;; Display UI and let user select an entry or
                ;; a sub-level prefix.
                (goto-char (point-min))
                (unless (pos-visible-in-window-p (point-max))
                  (org-fit-window-to-buffer))
                (let ((pressed (org--mks-read-key allowed-keys prompt nil)))
                  (setq current (concat current pressed))
                  (cond
                   ((equal pressed "\C-g") (user-error "Abort"))
                   ;; Selection is a prefix: open a new menu.
                   ((member pressed des-keys))
                   ;; Selection matches an association: return it.
                   ((let ((entry (assoc current table)))
                      (and entry (throw 'exit entry))))
                   ;; Selection matches a special entry: return the
                   ;; selection prefix.
                   ((assoc current specials) (throw 'exit current))
                   (t (error "No entry available")))))))
        (when buffer (kill-buffer buffer))))))
(advice-add 'org-mks :override #'org-mks-pretty)
#+end_src
Get a smaller org-capture frame.
#+begin_src emacs-lisp
(setf (alist-get 'height +org-capture-frame-parameters) 15)
;; (alist-get 'name +org-capture-frame-parameters) "❖ Capture") ;; ATM hardcoded in other places, so changing breaks stuff
(setq +org-capture-fn
      (lambda ()
        (interactive)
        (set-window-parameter nil 'mode-line-format 'none)
        (org-capture)))

#+end_src
*** Journal
Set up the journal
#+begin_src emacs-lisp
(use-package! org-journal
  :defer t
  :init
  (setq org-journal-prefix-key "C-c j")
  :config
  (setq org-journal-dir "~/org/journal/"
        org-journal-date-format "%A, %d, %B, %Y"))
#+end_src
It doesn't seem to like the prefix key so let's map it!
#+begin_src emacs-lisp
(map! :leader
      :desc "New journal entry"
      "- j"
      #'org-journal-new-entry)
#+end_src
*** Noter
Noter should not take up the entire screen when it is started...
#+begin_src emacs-lisp
(setq org-noter-always-create-frame nil)
#+end_src

There is a weird override of the ~i~ binding when viewing the document of a noter
session. To fix it, we have to map it again.
#+begin_src emacs-lisp
(map!
 :map org-noter-doc-mode-map
 :n "I" #'org-noter-insert-note-toggle-no-questions
 :n "i" #'org-noter-insert-note)
#+end_src

** Graphviz
#+begin_src emacs-lisp
(use-package! graphviz-dot-mode
  :ensure t
  :config
  (setq graphviz-dot-indent-width 4))

(use-package! company-graphviz-dot
  :after graphviz-dot-mode)
#+end_src
** Rust
Set up a rust server
#+begin_src emacs-lisp
(setq lsp-rust-server 'rust-analyzer)
#+end_src
** R
Better comment line breaks
#+begin_src emacs-lisp
(setq-hook! 'ess-r-mode-hook comment-line-break-function nil)
#+end_src
** SML
My professor wants some more strict line lengths, so let's reset our fill column
to reflect his preference of 100 characters. We also never want to use tabs so
that we are consistently correctly formatted.
#+begin_src emacs-lisp
(defun my-sml-mode-hook ()
  (setq indent-tabs-mode nil)
  (set-fill-column 100))
(add-hook 'sml-mode-hook 'my-sml-mode-hook)
#+end_src
